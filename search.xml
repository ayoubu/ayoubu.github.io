<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python之字典</title>
    <url>/archives/46747.html</url>
    <content><![CDATA[<h2 id="Python-字典-Dictionary"><a href="#Python-字典-Dictionary" class="headerlink" title="Python 字典(Dictionary)"></a>Python 字典(Dictionary)</h2><p>字典是另一种可变容器模型，且可存储任意类型对象。Python中的字典是唯一的<strong>映射类型</strong>，与之对应的列表、元组等都为序列类型。</p>
<p>字典的每个键值 <strong>key=&gt;value</strong> 对用冒号 <strong>:</strong> 分割，每个键值对之间用逗号 <strong>,</strong> 分割，整个字典包括在花括号 <strong>{}</strong> 中 ,格式如下所示：<code>d = &#123;key1 : value1, key2 : value2 &#125;</code>，索引的时候直接使用key值就行。</p>
<a id="more"></a>

<h2 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h2><p>一般情况直接使用上面所说的键值对的方式创建，也可以使用dict的构造函数进行创建。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1=dict(((<span class="number">1</span>,<span class="string">&#x27;A&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;B&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;C&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;D&#x27;</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;D&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 也可以使用下面这种赋值的，方式，但是这种key值不能为数值类型，不然会报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict2 = dict(a = <span class="string">&#x27;A&#x27;</span>, b = <span class="string">&#x27;B&#x27;</span>, c = <span class="string">&#x27;C&#x27;</span>, d = <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict2</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;D&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict2 = dict(<span class="number">1</span> = <span class="string">&#x27;A&#x27;</span>, <span class="number">2</span> = <span class="string">&#x27;B&#x27;</span>, <span class="number">3</span> = <span class="string">&#x27;C&#x27;</span>, <span class="number">4</span> = <span class="string">&#x27;D&#x27;</span>) <span class="comment">#错误示范</span></span><br><span class="line">SyntaxError: expression cannot contain assignment, perhaps you meant &quot;==&quot;?</span><br></pre></td></tr></table></figure>

<p>通过字典的键修改相应的值，如果键存在则会进行修改，如果不存在，则会添加新的键。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict3=&#123;<span class="string">&#x27;大宝&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict3[<span class="string">&#x27;小宝&#x27;</span>]=<span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict3</span><br><span class="line">&#123;<span class="string">&#x27;大宝&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>: <span class="string">&#x27;女&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict3[<span class="string">&#x27;小小宝&#x27;</span>] = <span class="string">&#x27;未知&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict3</span><br><span class="line">&#123;<span class="string">&#x27;大宝&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>: <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;小小宝&#x27;</span>: <span class="string">&#x27;未知&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Python</category>
        <category>python 语法学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>字典</tag>
        <tag>Dictionary</tag>
      </tags>
  </entry>
  <entry>
    <title>python之函数</title>
    <url>/archives/28278.html</url>
    <content><![CDATA[<h2 id="初识python函数"><a href="#初识python函数" class="headerlink" title="初识python函数"></a>初识python函数</h2><p>在python中定义函数的关键字为<strong>def</strong>，一个完整的函数应该包括函数名、参数、返回值。其中参数和返回值不是必要的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyFirstFunction</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;这是我的第一个函数。&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;&gt; MyFirstFunction()</span><br><span class="line">这是我的第一个函数。</span><br></pre></td></tr></table></figure>

<h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><p>函数定义过程中的参数成为形参，因为它只是一个形式，表示占据一个参数的位置。实参就是在函数调用过程中实际传入的参数，此时参数是有值的，代表一定含义的。</p>
<a id="more"></a>

<h3 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h3><p>函数文档是对函数进行解释说明的，它和注释的最大区别是，函数文档可以通过调用的方式打印出来，具体示例如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">MyFunc</span>():</span>    <span class="comment">#定义函数</span></span><br><span class="line">    <span class="string">&#x27;这个就是函数文档&#x27;</span></span><br><span class="line">    <span class="comment"># 打印一条消息</span></span><br><span class="line">    print(<span class="string">&#x27;我就是这条消息&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyFunc()</span><br><span class="line">我就是这条消息</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyFunc.__doc__</span><br><span class="line"><span class="string">&#x27;这个就是函数文档&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(MyFunc)    <span class="comment">#也可以通过help看到函数文档</span></span><br><span class="line">Help on function MyFunc <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">MyFunc()</span><br><span class="line">    这个就是函数文档</span><br></pre></td></tr></table></figure>

<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数是为了防止输入参数顺序错乱，在调用函数时只需要加上参数名就可以了，即使参数顺序和函数定义时不一致，也没有关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">MyFunc</span>(<span class="params">name,sex</span>):</span></span><br><span class="line">    print(name + <span class="string">&#x27;: &#x27;</span>+ sex)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyFunc(sex=<span class="string">&#x27;男&#x27;</span>,name=<span class="string">&#x27;大宝&#x27;</span>)</span><br><span class="line">大宝: 男</span><br></pre></td></tr></table></figure>

<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>默认参数就是在函数定义的过程中为函数赋的初始值，在程序调用的过程中如果没有给函数传递参数，函数就会使用初始值进行计算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">MyFunc</span>(<span class="params">name = <span class="string">&#x27;大宝&#x27;</span>,sex=<span class="string">&#x27;男&#x27;</span></span>):</span></span><br><span class="line">    print(name + <span class="string">&#x27;: &#x27;</span>+ sex)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyFunc()    <span class="comment">#此时函数调用不会出现错误</span></span><br><span class="line">大宝: 男</span><br></pre></td></tr></table></figure>

<h3 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h3><p>收集参数是可变长度的参数，需要在参数名前加’*’号来定义，收集参数和普通参数混用的时候，调用函数时需要以关键字的方式进行赋值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单独使用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">MyFunc</span>(<span class="params">*params</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;传入的参数的个数为：&#x27;</span>,len(params))</span><br><span class="line">    print(<span class="string">&#x27;第一个参数为：&#x27;</span>,params[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyFunc(<span class="string">&#x27;大宝&#x27;</span>,<span class="number">91</span>,<span class="string">&#x27;小宝&#x27;</span>,<span class="number">99</span>)</span><br><span class="line">传入的参数的个数为： <span class="number">4</span></span><br><span class="line">第一个参数为： 大宝</span><br><span class="line"><span class="comment"># 混合使用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">MyFunc</span>(<span class="params">*params, sex</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;传入的参数的个数为：&#x27;</span>,len(params))</span><br><span class="line">    print(params[<span class="number">0</span>]+<span class="string">&#x27;:&#x27;</span>+ sex)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyFunc(<span class="string">&#x27;大宝&#x27;</span>,<span class="number">91</span>,<span class="string">&#x27;小宝&#x27;</span>,<span class="number">99</span>,sex=<span class="string">&#x27;男&#x27;</span>) <span class="comment">#不加关键字会报错</span></span><br><span class="line">传入的参数的个数为： <span class="number">4</span></span><br><span class="line">大宝:男</span><br></pre></td></tr></table></figure>

<h3 id="函数变量的作用域"><a href="#函数变量的作用域" class="headerlink" title="函数变量的作用域"></a>函数变量的作用域</h3><p>局部变量：在函数内部定义的参数和变量都被称为局部变量，在函数外是无法被调用的。</p>
<p>全局变量：全局变量的作用域是一般是整个当前的代码块。全局变量的值定义后在函数中是可以访问的。</p>
<p>注：如果在函数中想对全局变量进行修改时，python会在函数内部复制一个局部变量给函数修改。但如果我们真的确认了要在函数内对全局变量进行修改，可以使用<code>global</code>关键字重新在函数内定义一下全局变量，此时在函数内对全局变量的修改就会生效。</p>
<h2 id="内嵌函数和闭包"><a href="#内嵌函数和闭包" class="headerlink" title="内嵌函数和闭包"></a>内嵌函数和闭包</h2><h3 id="内嵌函数"><a href="#内嵌函数" class="headerlink" title="内嵌函数"></a>内嵌函数</h3><p>在函数内部再嵌套一个函数，此时内部的函数即被称为内嵌函数或者内部函数，python是允许内嵌函数的定义的。内部函数的作用域是在整个外部函数之内的，也就是说想直接在外部函数外的地方直接调用内部函数是行不通的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本的函数嵌套方式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;This is func1...&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;This is func2...&#x27;</span>)</span><br><span class="line">    func2()</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func1()</span><br><span class="line">This <span class="keyword">is</span> func1...</span><br><span class="line">This <span class="keyword">is</span> func2...</span><br></pre></td></tr></table></figure>

<h3 id="闭包（closure）"><a href="#闭包（closure）" class="headerlink" title="闭包（closure）"></a>闭包（closure）</h3><p>在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">funx</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">funy</span>(<span class="params">y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x*y</span><br><span class="line">    <span class="keyword">return</span> funy</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func = funx(<span class="number">5</span>)     <span class="comment"># 调用funx()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(func)        <span class="comment">#查看funx()的返回值类型，类型是函数即:内部函数funy()</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">function</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">func</span>(<span class="params"><span class="number">8</span></span>)        # 像使用函数一样使用<span class="title">func</span></span></span><br><span class="line"><span class="class">40</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">funx</span>(<span class="params"><span class="number">5</span></span>)(<span class="params"><span class="number">8</span></span>)    # 也可以这样直接使用</span></span><br><span class="line"><span class="class">40</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

<p>内部函数也有一个作用域的问题，即它的作用域就是内部函数体内。内部函数体外，外部函数体内的变量对于内部函数来说就是全局变量，因此是无法直接在内部函数体内被修改的。与普通函数修改全局变量不同，内部函数修改外部函数的局部变量时会直接报错，而不是创建一个新的局部变量让内部函数修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误调用示范</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    x = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">        x *= x</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> func2()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func1()    <span class="comment"># 不能成功调用</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#27&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    func1()</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#26&gt;&quot;</span>, line <span class="number">6</span>, <span class="keyword">in</span> func1</span><br><span class="line">    <span class="keyword">return</span> func2()</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#26&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> func2</span><br><span class="line">    x *= x</span><br><span class="line">UnboundLocalError: local variable <span class="string">&#x27;x&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>

<p><strong>内部函数调用全局变量的实现方式之一：</strong>对于数值类型的变量来说，是直接存储在栈上的，因此函数执行完之后，变量值也会随之消失。基于此，我们可以选用一些存放在堆上的数据类型（即引用类型），从而避免变量消失。例如我们可以选用列表进行数据存储。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    x = [<span class="number">5</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">        x[<span class="number">0</span>] *= x[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> func2()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func1()</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure>

<p><strong>使用关键字<code>nonlocal</code>:</strong> 即强制将变量声明为非局部变量，示例如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    x = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x *= x</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> func2()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func1()</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure>

<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Python 允许使用lambda关键字来创建匿名函数。使用lambda来定义函数，是一种简化的定义函数的方法，有点偷懒的感觉。你不用去定义函数名，和返回值，只需要将定义的lambda语句赋值给一个变量，然后通过使用这个变量就可以实现类似函数实现的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x,y : x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="lambda表达式的作用"><a href="#lambda表达式的作用" class="headerlink" title="lambda表达式的作用"></a>lambda表达式的作用</h3><ul>
<li>Python写一些执行脚本时，使用lambda就可以省下定义函数的过程。比如说我们只是需要写个简单的脚本来管理服务器时间，我们就不需要专门定义一个函数然后再写调用，使用lambda就可以使得代码更加精简。</li>
<li>对于一些抽象且调用次数较少的函数，起名字很麻烦，使用lambda就可以简化这个过程。</li>
<li>增加代码的可读性，不需要再跳转到函数的定义部分查看函数。</li>
</ul>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>Filter指的是过滤器，filter的默认参数有两个，一个是function or None，另一个是迭代器。当第一个参数为None的时候，默认过滤的是迭代对象中为True的元素，过滤的结果可以转化成list查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span>, range(<span class="number">20</span>))) <span class="comment">#打印20以内的所有基数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Map和filter有点类似，只不过map是用来加工迭代器中的值，而filter是用来过滤迭代器中的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> x: x*x, range(<span class="number">10</span>))) <span class="comment">#求平方</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>简单的说就是再函数内部调用函数自身，从而实现一些迭代的操作。Python为了防止程序进入死循环，设置的默认递归深度为100，可以通过sys模块进行更改。递归两个重要的点：1.函数中调用了自身。2.函数内有终止条件。递归在算法中被称为分治思想。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求阶乘示例，普通方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">n</span>):</span></span><br><span class="line">    num =<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        num *= i</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="number">5</span>)</span><br><span class="line"><span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用递归的写法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * func(n<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">5</span>)</span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure>

<p>斐波那契数列的实现方式：</p>
<ul>
<li>迭代实现：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">n</span>):</span></span><br><span class="line">    n_2 = <span class="number">1</span>        <span class="comment"># 第n-2的和</span></span><br><span class="line">    n_1 = <span class="number">1</span>        <span class="comment"># 第n-1的和</span></span><br><span class="line">    num = <span class="number">0</span>        <span class="comment"># 当前的和</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            num = n_2 + n_1</span><br><span class="line">            n_2 = n_1</span><br><span class="line">            n_1 = num</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">4</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">5</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">12</span>)</span><br><span class="line"><span class="number">144</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>)</span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure>

<ul>
<li>递归实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; n &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> func(n<span class="number">-2</span>) + func(n<span class="number">-1</span>)</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">4</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">5</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">12</span>)</span><br><span class="line"><span class="number">144</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>)</span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用递归解决汉诺塔问题</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span>(<span class="params">n,x,y,z</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print(x, <span class="string">&#x27;---&gt;&#x27;</span>, z)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hanoi(n<span class="number">-1</span>, x, z, y)        <span class="comment"># 将前n-1个盘子从x移动到y上</span></span><br><span class="line">        print(x, <span class="string">&#x27;---&gt;&#x27;</span>, z)        <span class="comment"># 将最底下的最后一个盘子从x移动到z上</span></span><br><span class="line">        hanoi(n<span class="number">-1</span>, y, x, z)        <span class="comment"># 将y上的n-1个盘子移动到z上</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hanoi(<span class="number">3</span>,<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">X ---&gt; Z</span><br><span class="line">X ---&gt; Y</span><br><span class="line">Z ---&gt; Y</span><br><span class="line">X ---&gt; Z</span><br><span class="line">Y ---&gt; X</span><br><span class="line">Y ---&gt; Z</span><br><span class="line">X ---&gt; Z</span><br></pre></td></tr></table></figure>

<p>对于递归调用的逻辑，下图解释的很清楚，只需要把A,B,C换成X,Y,Z就行。</p>
<p><img src="https://i.imgur.com/AkpP4En.png" alt="n=3时的递归调用图"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>python 语法学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>python课后作业002</title>
    <url>/archives/7409.html</url>
    <content><![CDATA[<h3 id="什么是BIF？"><a href="#什么是BIF？" class="headerlink" title="什么是BIF？"></a>什么是BIF？</h3><p>BIF 就是 Built-in Functions，内置函数。为了方便程序员快速编写脚本程序（脚本就是要编程速度快快快！！！），Python 提供了非常丰富的内置函数，我们只需要直接调用即可，例如 print() 的功能是“打印到屏幕”，input() 的作用是接收用户输入（注：Python3 用 input() 取代了 Python2 的 raw_input()，用法如有不懂请看视频讲解）。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>课后作业</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BIF</tag>
      </tags>
  </entry>
  <entry>
    <title>python之字符串</title>
    <url>/archives/49647.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>字符串和元组有点类似，可以把字符串理解为一个由字符组成的元组，字符串一旦创建也是不能更改的。也就是说不能通过索引去更改某个字符。但是，python字符串类提供了很多方法，可以帮我们实现这些操作。</p>
<p>Python 字符串的编写方式多种多样，主要有：Single quotes、Double quotes 还有 Triple quoted 三种形式。</p>
<h3 id="Single-quotes"><a href="#Single-quotes" class="headerlink" title="Single quotes"></a>Single quotes</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;I love you&#x27;</span>)</span><br><span class="line">I love you</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="Double-quotes"><a href="#Double-quotes" class="headerlink" title="Double quotes"></a>Double quotes</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&quot;I love you&quot;</span>)</span><br><span class="line">I love you</span><br></pre></td></tr></table></figure>

<h3 id="Triple-quotes"><a href="#Triple-quotes" class="headerlink" title="Triple quotes"></a>Triple quotes</h3><p>通常，使用三引号字符串来引用多行文本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poetry = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">面朝大海，春暖花开</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">从明天起，做一个幸福的人</span></span><br><span class="line"><span class="string">喂马、劈柴，周游世界&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="混合使用-Single-quotes-和-Double-quotes"><a href="#混合使用-Single-quotes-和-Double-quotes" class="headerlink" title="混合使用 Single quotes 和 Double quotes"></a>混合使用 Single quotes 和 Double quotes</h3><p>一般在我们需要输出带引号的一句话时使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&quot;Let&#x27;s go!&quot;</span>)    <span class="comment">#此时使用单引号，就会有问题</span></span><br><span class="line">Let<span class="string">&#x27;s go!</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(&#x27;</span><span class="string">&quot;Life is short, you need Python.&quot;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">&quot;Life is short, you need Python.&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串的内置方法"><a href="#字符串的内置方法" class="headerlink" title="字符串的内置方法"></a>字符串的内置方法</h2><p>以下列举了所有的python字符串内置函数。</p>
<table>
<thead>
<tr>
<th>capitalize()</th>
<th>把字符串的第一个字符改为大写</th>
</tr>
</thead>
<tbody><tr>
<td>casefold()</td>
<td>把整个字符串的所有字符改为小写</td>
</tr>
<tr>
<td>center(width)</td>
<td>将字符串居中，并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr>
<td>count(sub[, start[, end]])</td>
<td>返回 sub 在字符串里边出现的次数，start 和 end 参数表示范围，可选。</td>
</tr>
<tr>
<td>encode(encoding=’utf-8’, errors=’strict’)</td>
<td>以 encoding 指定的编码格式对字符串进行编码。</td>
</tr>
<tr>
<td>endswith(sub[, start[, end]])</td>
<td>检查字符串是否以 sub 子字符串结束，如果是返回 True，否则返回 False。start 和 end 参数表示范围，可选。</td>
</tr>
<tr>
<td>expandtabs([tabsize=8])</td>
<td>把字符串中的 tab 符号（\t）转换为空格，如不指定参数，默认的空格数是 tabsize=8。</td>
</tr>
<tr>
<td>find(sub[, start[, end]])</td>
<td>检测 sub 是否包含在字符串中，如果有则返回索引值，否则返回 -1，start 和 end 参数表示范围，可选。</td>
</tr>
<tr>
<td>index(sub[, start[, end]])</td>
<td>跟 find 方法一样，不过如果 sub 不在 string 中会产生一个异常。</td>
</tr>
<tr>
<td>isalnum()</td>
<td>如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>isalpha()</td>
<td>如果字符串至少有一个字符并且所有字符都是字母则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>isdecimal()</td>
<td>如果字符串只包含十进制数字则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>isdigit()</td>
<td>如果字符串只包含数字则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>islower()</td>
<td>如果字符串中至少包含一个区分大小写的字符，并且这些字符都是小写，则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>isnumeric()</td>
<td>如果字符串中只包含数字字符，则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>isspace()</td>
<td>如果字符串中只包含空格，则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>istitle()</td>
<td>如果字符串是标题化（所有的单词都是以大写开始，其余字母均小写），则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>isupper()</td>
<td>如果字符串中至少包含一个区分大小写的字符，并且这些字符都是大写，则返回 True，否则返回 False。</td>
</tr>
<tr>
<td>join(sub)</td>
<td>以字符串作为分隔符，插入到 sub 中所有的字符之间。</td>
</tr>
<tr>
<td>ljust(width)</td>
<td>返回一个左对齐的字符串，并使用空格填充至长度为 width 的新字符串。</td>
</tr>
<tr>
<td>lower()</td>
<td>转换字符串中所有大写字符为小写。</td>
</tr>
<tr>
<td>lstrip()</td>
<td>去掉字符串左边的所有空格</td>
</tr>
<tr>
<td>partition(sub)</td>
<td>找到子字符串 sub，把字符串分成一个 3 元组 (pre_sub, sub, fol_sub)，如果字符串中不包含 sub 则返回 (‘原字符串’, ‘’, ‘’)</td>
</tr>
<tr>
<td>replace(old, new[, count])</td>
<td>把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次。</td>
</tr>
<tr>
<td>rfind(sub[, start[, end]])</td>
<td>类似于 find() 方法，不过是从右边开始查找。</td>
</tr>
<tr>
<td>rindex(sub[, start[, end]])</td>
<td>类似于 index() 方法，不过是从右边开始。</td>
</tr>
<tr>
<td>rjust(width)</td>
<td>返回一个右对齐的字符串，并使用空格填充至长度为 width 的新字符串。</td>
</tr>
<tr>
<td>rpartition(sub)</td>
<td>类似于 partition() 方法，不过是从右边开始查找。</td>
</tr>
<tr>
<td>rstrip()</td>
<td>删除字符串末尾的空格。</td>
</tr>
<tr>
<td>split(sep=None, maxsplit=-1)</td>
<td>不带参数默认是以空格为分隔符切片字符串，如果 maxsplit 参数有设置，则仅分隔 maxsplit 个子字符串，返回切片后的子字符串拼接的列表。</td>
</tr>
<tr>
<td>splitlines(([keepends]))</td>
<td>在输出结果里是否去掉换行符，默认为 False，不包含换行符；如果为 True，则保留换行符。。</td>
</tr>
<tr>
<td>startswith(prefix[, start[, end]])</td>
<td>检查字符串是否以 prefix 开头，是则返回 True，否则返回 False。start 和 end 参数可以指定范围检查，可选。</td>
</tr>
<tr>
<td>strip([chars])</td>
<td>删除字符串前边和后边所有的空格，chars 参数可以定制删除的字符，可选。</td>
</tr>
<tr>
<td>swapcase()</td>
<td>翻转字符串中的大小写。</td>
</tr>
<tr>
<td>title()</td>
<td>返回标题化（所有的单词都是以大写开始，其余字母均小写）的字符串。</td>
</tr>
<tr>
<td>translate(table)</td>
<td>根据 table 的规则（可以由 str.maketrans(‘a’, ‘b’) 定制）转换字符串中的字符。</td>
</tr>
<tr>
<td>upper()</td>
<td>转换字符串中的所有小写字符为大写。</td>
</tr>
<tr>
<td>zfill(width)</td>
<td>返回长度为 width 的字符串，原字符串右对齐，前边用 0 填充。</td>
</tr>
</tbody></table>
<h3 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize()"></a>capitalize()</h3><p>将字符串的首字母变成大写形式，然后返回一个新的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">&#x27;xiao xie&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2.capitalize()</span><br><span class="line"><span class="string">&#x27;Xiao xie&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="casefold"><a href="#casefold" class="headerlink" title="casefold()"></a>casefold()</h3><p>将字符串中的大写全部变成小写，然后返回一个新的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;DaXie&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.casefold()</span><br><span class="line"><span class="string">&#x27;daxie&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="center-width"><a href="#center-width" class="headerlink" title="center(width)"></a>center(width)</h3><p>将字符串居中，并使用空格填充至长度为width 的新字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;center&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.center(<span class="number">40</span>)</span><br><span class="line"><span class="string">&#x27;                 center                 &#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="endswith-sub-start-end"><a href="#endswith-sub-start-end" class="headerlink" title="endswith(sub[,start[,end]])"></a>endswith(sub[,start[,end]])</h3><p>检查字符串是否以 sub 子字符串结束，如果是返回 True，否则返回 False。start 和 end 参数表示范围，可选。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;center&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.endswith(<span class="string">&#x27;er&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.endswith(<span class="string">&#x27;er&#x27;</span>,<span class="number">0</span>,<span class="number">4</span>)    <span class="comment">#查找前四个是否以‘er&#x27;结束</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="expandtabs-tabsize-8"><a href="#expandtabs-tabsize-8" class="headerlink" title="expandtabs([tabsize=8])"></a>expandtabs([tabsize=8])</h3><p>把字符串中的 tab 符号（\t）转换为空格，如不指定参数，默认的空格数是 tabsize=8。默认参数下有点像print时的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;I\tlove\tyou&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">I    love    you</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.expandtabs()</span><br><span class="line"><span class="string">&#x27;I       love    you&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="find-sub-start-end"><a href="#find-sub-start-end" class="headerlink" title="find(sub[,start[,end]])"></a>find(sub[,start[,end]])</h3><p>检测 sub 是否包含在字符串中，如果有则返回索引值，否则返回 -1，start 和 end 参数表示范围，可选。 与之相应的index(sub)跟 find 方法一样，不过如果 sub 不在 string 中会产生一个异常。</p>
<p>除此之外还有rfind()，它和find()类似，只不过从右边开始查找，这个是为节省时间。与之对应的index()也有rindex()方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;I love you&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">&#x27;he&#x27;</span>)   <span class="comment">#找不到时返回-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">&#x27;you&#x27;</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="join-sub"><a href="#join-sub" class="headerlink" title="join(sub)"></a>join(sub)</h3><p>以字符串作为分隔符，插入到 sub 中所有的字符之间。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;大宝&#x27;</span>   <span class="comment">#把’大宝‘作为分隔符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.join(<span class="string">&#x27;||||&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;|大宝|大宝|大宝|&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="lstrip"><a href="#lstrip" class="headerlink" title="lstrip()"></a>lstrip()</h3><p>去掉字符串左边的所有空格 ，与之对应的还有rstrip()，即去掉字符串右边的所有空格。还有strip()是两头的都去掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;       I love you          &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lstrip()</span><br><span class="line"><span class="string">&#x27;I love you          &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rstrip()</span><br><span class="line"><span class="string">&#x27;       I love you&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.strip()</span><br><span class="line"><span class="string">&#x27;I love you&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="partition-sub"><a href="#partition-sub" class="headerlink" title="partition(sub)"></a>partition(sub)</h3><p>找到子字符串 sub，把字符串分成一个 3 元组 (pre_sub, sub, fol_sub)，如果字符串中不包含 sub 则返回 (‘原字符串’, ‘’, ‘’) </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;Iloveyou&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.partition(<span class="string">&#x27;love&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;love&#x27;</span>, <span class="string">&#x27;you&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="replace-old-new-count"><a href="#replace-old-new-count" class="headerlink" title="replace(old,new[,count])"></a>replace(old,new[,count])</h3><p>把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s =<span class="string">&#x27;大宝，大宝，大宝&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">&#x27;大&#x27;</span>,<span class="string">&#x27;小&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;小宝，小宝，小宝&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">&#x27;大&#x27;</span>,<span class="string">&#x27;小&#x27;</span>,<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;小宝，小宝，大宝&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="split-sep-None-maxsplit-1"><a href="#split-sep-None-maxsplit-1" class="headerlink" title="split(sep=None, maxsplit=-1)"></a>split(sep=None, maxsplit=-1)</h3><p>不带参数默认是以空格为分隔符切片字符串，如果 maxsplit 参数有设置，则仅分隔 maxsplit 个子字符串，返回切片后的子字符串拼接的列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;I love you&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split()    <span class="comment">#以空格切割</span></span><br><span class="line">[<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;love&#x27;</span>, <span class="string">&#x27;you&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s =<span class="string">&#x27;大宝，大宝，大宝&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split(<span class="string">&#x27;，&#x27;</span>)    <span class="comment">#以’，‘切割</span></span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;大宝&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="translate-table"><a href="#translate-table" class="headerlink" title="translate(table)"></a>translate(table)</h3><p>根据 table 的规则（可以由 str.maketrans(‘a’, ‘b’) 定制）转换字符串中的字符。有点类似replace操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s =<span class="string">&#x27;大宝，大宝，大宝&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.translate(str.maketrans(<span class="string">&#x27;大&#x27;</span>,<span class="string">&#x27;小&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;小宝，小宝，小宝&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><h3 id="format-方法"><a href="#format-方法" class="headerlink" title="format() 方法"></a>format() 方法</h3><p>format()方法可以使用位置参数或者关键字参数，可以单独使用，也可以混合使用，混合使用时位置参数必须在关键字参数之前。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用位置参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;0&#125; love &#123;1&#125;!&quot;</span>.format(<span class="string">&quot;I&quot;</span>,<span class="string">&quot;you&quot;</span>)</span><br><span class="line"><span class="string">&#x27;I love you!&#x27;</span></span><br><span class="line"><span class="comment"># 使用变量作为参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;a&#125; love &#123;b&#125;!&quot;</span>.format(a = <span class="string">&quot;I&quot;</span>,b = <span class="string">&quot;you&quot;</span>)</span><br><span class="line"><span class="string">&#x27;I love you!&#x27;</span></span><br><span class="line"><span class="comment"># 混合使用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;0&#125; love &#123;b&#125;!&quot;</span>.format(<span class="string">&quot;I&quot;</span>,b = <span class="string">&quot;you&quot;</span>)</span><br><span class="line"><span class="string">&#x27;I love you!&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="小数的格式化打印"><a href="#小数的格式化打印" class="headerlink" title="小数的格式化打印"></a>小数的格式化打印</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;0:.2f&#125; &#123;1&#125;&#x27;</span>.format(<span class="number">0.12345</span>,<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;0.12 %&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串格式化符号"><a href="#字符串格式化符号" class="headerlink" title="字符串格式化符号"></a>字符串格式化符号</h2><h3 id="字符串格式化符号含义"><a href="#字符串格式化符号含义" class="headerlink" title="字符串格式化符号含义"></a>字符串格式化符号含义</h3><table>
<thead>
<tr>
<th><strong>符号</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%c</td>
<td>格式化字符及其 ASCII 码</td>
</tr>
<tr>
<td>%s</td>
<td>格式化字符串</td>
</tr>
<tr>
<td>%d</td>
<td>格式化整数</td>
</tr>
<tr>
<td>%o</td>
<td>格式化无符号八进制数</td>
</tr>
<tr>
<td>%x</td>
<td>格式化无符号十六进制数</td>
</tr>
<tr>
<td>%X</td>
<td>格式化无符号十六进制数（大写）</td>
</tr>
<tr>
<td>%f</td>
<td>格式化浮点数字，可指定小数点后的精度</td>
</tr>
<tr>
<td>%e</td>
<td>用科学计数法格式化浮点数</td>
</tr>
<tr>
<td>%E</td>
<td>作用同 %e，用科学计数法格式化浮点数</td>
</tr>
<tr>
<td>%g</td>
<td>根据值的大小决定使用 %f 或 %e</td>
</tr>
<tr>
<td>%G</td>
<td>作用同 %g，根据值的大小决定使用 %f 或者 %E</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%c %c %c&#x27;</span> % (<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>)        <span class="comment"># 格式化字符及其 ASCII 码</span></span><br><span class="line"><span class="string">&#x27;a b c&#x27;</span></span><br><span class="line"><span class="string">&#x27;%s %s %s&#x27;</span> % (<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;love&#x27;</span>,<span class="string">&#x27;you&#x27;</span>)    <span class="comment"># 用字符串格式化字符串</span></span><br><span class="line"><span class="string">&#x27;I love you&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%d ,%d&#x27;</span> %(<span class="number">25.66</span>,<span class="number">40</span>)     <span class="comment">#小数也会被格式化成整数</span></span><br><span class="line"><span class="string">&#x27;25 ,40&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%x&#x27;</span>% <span class="number">11</span>    <span class="comment">#格式化为16进制（小写字母）</span></span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%X&#x27;</span>% <span class="number">11</span>    <span class="comment">#格式化为16进制（大写字母）</span></span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%f&#x27;</span>%<span class="number">1.25</span>    <span class="comment">#格式化为浮点数，默认保留小数点后6位，不够会以0补齐</span></span><br><span class="line"><span class="string">&#x27;1.250000&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="格式化操作符辅助命令"><a href="#格式化操作符辅助命令" class="headerlink" title="格式化操作符辅助命令"></a>格式化操作符辅助命令</h3><table>
<thead>
<tr>
<th><strong>符号</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>m.n</td>
<td>m 是显示的最小总宽度，n 是小数点后的位数</td>
</tr>
<tr>
<td>-</td>
<td>用于左对齐</td>
</tr>
<tr>
<td>+</td>
<td>在正数前面显示加号（+）</td>
</tr>
<tr>
<td>#</td>
<td>在八进制数前面显示 ‘0o’，在十六进制数前面显示 ‘0x’ 或 ‘0X’</td>
</tr>
<tr>
<td>0</td>
<td>显示的数字前面填充 ‘0’ 取代空格</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%5.1f&#x27;</span> % <span class="number">27.658</span>   <span class="comment">#总长度为5，保留1位小数</span></span><br><span class="line"><span class="string">&#x27; 27.7&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%.2e&#x27;</span>%<span class="number">27.568</span>    <span class="comment">#保留两位小数</span></span><br><span class="line"><span class="string">&#x27;2.76e+01&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%6d&#x27;</span>%<span class="number">1</span>        <span class="comment">#格式化整数，总长度为6</span></span><br><span class="line"><span class="string">&#x27;     1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%-6d&#x27;</span>%<span class="number">1</span>    <span class="comment">#格式化整数，总长度为6，左对齐</span></span><br><span class="line"><span class="string">&#x27;1     &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%+d&#x27;</span>%<span class="number">1</span>        <span class="comment">#格式化显示正整数，并添加符号</span></span><br><span class="line"><span class="string">&#x27;+1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%+d&#x27;</span>%<span class="number">-1</span>    <span class="comment">#格式化显示负整数，并添加符号</span></span><br><span class="line"><span class="string">&#x27;-1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%d&#x27;</span>%<span class="number">-1</span>        <span class="comment">#仅显示负数时可以不用+号</span></span><br><span class="line"><span class="string">&#x27;-1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%#o&#x27;</span>%<span class="number">10</span>    <span class="comment">#格式化显示八进制数，并添加八进制说明符</span></span><br><span class="line"><span class="string">&#x27;0o12&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%#X&#x27;</span>%<span class="number">12</span>    <span class="comment">#格式化显示十六进制数，并添加十六进制说明符</span></span><br><span class="line"><span class="string">&#x27;0XC&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%06d&#x27;</span>%<span class="number">1</span>    <span class="comment">#格式化显示整数，以0替换空格</span></span><br><span class="line"><span class="string">&#x27;000001&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="Python-的转义字符及其含义"><a href="#Python-的转义字符及其含义" class="headerlink" title="Python 的转义字符及其含义"></a>Python 的转义字符及其含义</h3><table>
<thead>
<tr>
<th><strong>符号</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&#39;</td>
<td>单引号</td>
</tr>
<tr>
<td>&quot;</td>
<td>双引号</td>
</tr>
<tr>
<td>\a</td>
<td>发出系统响铃声</td>
</tr>
<tr>
<td>\b</td>
<td>退格符</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\t</td>
<td>横向制表符（TAB）</td>
</tr>
<tr>
<td>\v</td>
<td>纵向制表符</td>
</tr>
<tr>
<td>\r</td>
<td>回车符</td>
</tr>
<tr>
<td>\f</td>
<td>换页符</td>
</tr>
<tr>
<td>\o</td>
<td>八进制数代表的字符</td>
</tr>
<tr>
<td>\x</td>
<td>十六进制数代表的字符</td>
</tr>
<tr>
<td>\0</td>
<td>表示一个空字符</td>
</tr>
<tr>
<td>\</td>
<td>反斜杠</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
        <category>python 语法学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>python 之 tuple</title>
    <url>/archives/51299.html</url>
    <content><![CDATA[<h2 id="元组的概念"><a href="#元组的概念" class="headerlink" title="元组的概念"></a>元组的概念</h2><p>元组和列表很相似，只不过元组一旦定义了以后就不能更改了。</p>
<h2 id="创建和访问元组"><a href="#创建和访问元组" class="headerlink" title="创建和访问元组"></a>创建和访问元组</h2><p>元组的创建“，”非常重要。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常规创建元组的方法---()</span></span><br><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)    <span class="comment">#创建一个元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">1</span>]    <span class="comment">#访问元组内的第一个元素</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>[<span class="number">5</span>:]    <span class="comment">#访问索引为5之后的所有元素</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t2 = t[:]     <span class="comment">#拷贝元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个空元组</span></span><br><span class="line">t = ()</span><br><span class="line"><span class="comment">#创建只有一个元素的元组时一定要加,</span></span><br><span class="line">t = (<span class="number">1</span>,)</span><br><span class="line">t = <span class="number">1</span>,    <span class="comment">#这种语法也是合法的</span></span><br><span class="line">t = <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>     <span class="comment">#这种也可以正常创建</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="更新和删除元组"><a href="#更新和删除元组" class="headerlink" title="更新和删除元组"></a>更新和删除元组</h2><p>有时我们可能需要对元组进行一些插入和拼接的操作，这时我们可以用切片的方式来实现。我们一般情况不用删除，python的回收器会自动帮我们删除。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>)    <span class="comment">#创建一个元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = t[:<span class="number">1</span>] + (<span class="number">91</span>,) + t[<span class="number">1</span>:] + (<span class="number">99</span>,)  <span class="comment">#对元组进行操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>)    <span class="comment">#最终结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> t     <span class="comment">#删除元组</span></span><br></pre></td></tr></table></figure>

<h2 id="元组中可以使用的操作符"><a href="#元组中可以使用的操作符" class="headerlink" title="元组中可以使用的操作符"></a>元组中可以使用的操作符</h2><ul>
<li>拼接操作符，即  “ + ”。</li>
<li>重复操作符，即 “ * ”。</li>
<li>关系操作符，即 “ &gt; ,&lt;”。</li>
<li>成员操作符，即：in , not in</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>python 语法学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>tuple</tag>
        <tag>元组</tag>
      </tags>
  </entry>
  <entry>
    <title>python之list</title>
    <url>/archives/17219.html</url>
    <content><![CDATA[<h2 id="List的结构"><a href="#List的结构" class="headerlink" title="List的结构"></a>List的结构</h2><p>Python中的list是以栈这种数据结构存储的，因此包含一些栈的特性。List中可以存放任何数据以及对象。</p>
<h2 id="向List中添加元素"><a href="#向List中添加元素" class="headerlink" title="向List中添加元素"></a>向List中添加元素</h2><h3 id="append-方法"><a href="#append-方法" class="headerlink" title="append() 方法"></a>append() 方法</h3><p>向一个列表中添加一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>]</span><br><span class="line">l.append(<span class="string">&#x27;小宝&#x27;</span>)   <span class="comment">#append 只能接受一个参数</span></span><br><span class="line">&gt;&gt;&gt;l</span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="extend-方法"><a href="#extend-方法" class="headerlink" title="extend() 方法"></a>extend() 方法</h3><p>该方法也是扩展列表的方法，只不过是用另一个列表进行扩展，也可以理解为把一个列表添加到另一个列表的后面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">l.extend([<span class="number">91</span>,<span class="number">99</span>])</span><br><span class="line">&gt;&gt;&gt;l</span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>,<span class="number">91</span>,<span class="number">99</span>]</span><br></pre></td></tr></table></figure>

<h3 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert() 方法"></a>insert() 方法</h3><p>前两个方法是在列表后面添加元素，有时需要在指定位置添加元素，此时就需要用到insert()方法了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">l.insert(<span class="number">1</span>,<span class="number">91</span>) <span class="comment">#在l中的第一个位置插入91</span></span><br><span class="line">&gt;&gt;&gt;l</span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>,<span class="number">91</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="从List中删除元素"><a href="#从List中删除元素" class="headerlink" title="从List中删除元素"></a>从List中删除元素</h2><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">l.remove(<span class="string">&#x27;大宝&#x27;</span>)</span><br><span class="line"><span class="comment">#此时列表为 l = [&#x27;小宝&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="语句-del"><a href="#语句-del" class="headerlink" title="语句 del()"></a>语句 del()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> l[<span class="number">0</span>] <span class="comment">#删除‘大宝’</span></span><br><span class="line"><span class="keyword">del</span> l  <span class="comment">#删除整个列表</span></span><br></pre></td></tr></table></figure>

<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p><code>pop()</code> 可以从列表中取出最后一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">you = l.pop()  <span class="comment">#取出列表中的最后一个元素，即：‘小宝’</span></span><br><span class="line"><span class="comment"># pop()取出特定元素</span></span><br><span class="line">me = pop(<span class="number">0</span>)   <span class="comment">#取出列表中的第一个元素，即：‘大宝’</span></span><br></pre></td></tr></table></figure>

<h2 id="列表的切片操作（slice）"><a href="#列表的切片操作（slice）" class="headerlink" title="列表的切片操作（slice）"></a>列表的切片操作（slice）</h2><p>前面的操作只是用来处理列表中的单个元素，而列表的切片操作是用来处理多个元素的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>]</span><br><span class="line">&gt;&gt;&gt;l[<span class="number">1</span>:<span class="number">3</span>]   <span class="comment">#取出数组中第一个到第三个元素</span></span><br><span class="line">[<span class="number">91</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l[:<span class="number">3</span>]  <span class="comment">#取出从开始到第三个元素</span></span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l[<span class="number">1</span>:]  <span class="comment">#取出从第一个到数据末尾的所有元素</span></span><br><span class="line">[<span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>]</span><br><span class="line">&gt;&gt;&gt;l[:]  <span class="comment">#相当于拷贝当前列表</span></span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>]</span><br></pre></td></tr></table></figure>

<h2 id="列表中的一些常用操作符"><a href="#列表中的一些常用操作符" class="headerlink" title="列表中的一些常用操作符"></a>列表中的一些常用操作符</h2><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><p>两个列表进行比较会从第一个元素开始比，相等时才会跳到下一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">list2 = [<span class="number">234</span>,<span class="number">123</span>]</span><br><span class="line">list3 = [<span class="number">123</span>,<span class="number">123</span>]</span><br><span class="line">&gt;&gt;&gt;list1 &gt; list2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;list1 &gt; list3</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="连接操作符"><a href="#连接操作符" class="headerlink" title="连接操作符"></a>连接操作符</h3><p>列表可以相加，从而实现两个列表的连接。但是加法操作不能实现向列表中添加新元素的操作。为了规范期间最好不要使用列表的加法操作来拼接两个列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">list2 = [<span class="number">234</span>,<span class="number">123</span>]</span><br><span class="line">&gt;&gt;&gt;list1 + <span class="number">789</span></span><br><span class="line">error</span><br><span class="line">&gt;&gt;&gt;list1 + list2</span><br><span class="line">[<span class="number">123</span>,<span class="number">456</span>,<span class="number">234</span>,<span class="number">123</span>]</span><br></pre></td></tr></table></figure>

<h3 id="重复操作符"><a href="#重复操作符" class="headerlink" title="重复操作符"></a>重复操作符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">&gt;&gt;&gt;list1 * <span class="number">3</span>  <span class="comment">#列表乘一个数，相当于将一个列表复制几次</span></span><br><span class="line">[<span class="number">123</span>,<span class="number">456</span>,<span class="number">123</span>,<span class="number">456</span>,<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">&gt;&gt;&gt;list1 *= <span class="number">3</span>  <span class="comment">#复合操作，相当于将一个列表复制3次，然后再放进原列表</span></span><br><span class="line">&gt;&gt;&gt;list1</span><br><span class="line">[<span class="number">123</span>,<span class="number">456</span>,<span class="number">123</span>,<span class="number">456</span>,<span class="number">123</span>,<span class="number">456</span>]</span><br></pre></td></tr></table></figure>

<h3 id="成员关系操作符"><a href="#成员关系操作符" class="headerlink" title="成员关系操作符"></a>成员关系操作符</h3><p>成员关系操作符就是判断成员和列表的关系。这种判断只能在同一个维度的列表中进行，不能判断嵌套列表中的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">123</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;大宝&#x27;</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;小宝&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 嵌套列表的情况</span></span><br><span class="line">list2 = [<span class="number">123</span>,<span class="number">456</span>,[<span class="string">&#x27;小宝&#x27;</span>]]</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;小宝&#x27;</span> <span class="keyword">in</span> list2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 可以用这种方式进行访问</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;小宝&#x27;</span> <span class="keyword">in</span> list2[<span class="number">2</span>]</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="列表的内置函数"><a href="#列表的内置函数" class="headerlink" title="列表的内置函数"></a>列表的内置函数</h2><p>列表的内置函数即列表这个类，官方提供的可用的函数，可以通过<code>dir(list)</code> 这个命令进行查看。</p>
<h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>count() 函数是用来计算列表中某个元素出现的次数的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l.count(<span class="string">&#x27;大宝&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;l.count(<span class="string">&#x27;小宝&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>


<h3 id="index-函数"><a href="#index-函数" class="headerlink" title="index() 函数"></a>index() 函数</h3><p>index() 函数是用来查找元素出现的位置的，会返回元素第一次出现的位置。index()函数还可以对查找范围进行限制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>, <span class="string">&#x27;小宝&#x27;</span>,<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l.index(<span class="string">&#x27;大宝&#x27;</span>)   <span class="comment">#查找列表中&#x27;大宝&#x27;出现的位置</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;l.index(<span class="string">&#x27;小宝&#x27;</span>，<span class="number">3</span>，<span class="number">5</span>)  <span class="comment">#查找从3到5这个区间中&#x27;小宝&#x27;出现的位置</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>reverse() 函数会将列表进行反转，即原来第一个元素会和最后一个元素调换位置，第二个会和倒数第二个元素调换位置，以此类推。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>]</span><br><span class="line">&gt;&gt;&gt;l.reverse()</span><br><span class="line">[<span class="number">99</span>,<span class="string">&#x27;小宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;大宝&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort() 函数是用于对列表进行排序的函数。sort()函数可以对纯数字或者对纯字符的列表进行排序，不能对混合的列表进行排序。sort() 函数有三个参数，第一个是要使用的排序算法func，第二个是与该算法对应的key，第三个是reverse，即是否反转（逆序）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;af&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;bc&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;af&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>]</span><br><span class="line">l=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">l=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort(reverse=<span class="literal">True</span>)   <span class="comment">#默认reverse=False</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="列表的拷贝"><a href="#列表的拷贝" class="headerlink" title="列表的拷贝"></a>列表的拷贝</h2><p>列表的拷贝分为<strong>深拷贝</strong>和<strong>浅拷贝</strong>，其中深拷贝是会在内存中重新复制一个原数组，而浅拷贝只是给原数组起了个别名而已。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line">l1 = l    <span class="comment">#浅拷贝</span></span><br><span class="line">l2 = l[:]    <span class="comment">#深拷贝</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>python 语法学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>写作以及博文管理</title>
    <url>/archives/6783.html</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我的博客网站已经搭好，在此特别感谢一下<a href="https://tding.top/archives/2bd6d82.html">小丁</a>的分享。我下的是NexT最新的主题，再搭建的过程踩了不少坑，不过大部分问题通过参考他的解决方案都完美解决了，一些小的地方，只要理解了他的解决方式，也都可以用相似的方法解决，具体的我就不在赘述了。</p>
<p>在搭建好博客之后我就想开始我的博客之路了，可是关于怎么去写博客，网上虽然都介绍，但是我感觉都有点简单，对于要经常写博客的同学来说，可能有点不太友好。通过YouTube上的一位UP主<a href="https://www.youtube.com/playlist?list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm">Mike Dan</a>的分享，我整理出了一些方法，现在记录分享给大家。</p>
<a id="more"></a>

<h2 id="新建一篇博文（post）"><a href="#新建一篇博文（post）" class="headerlink" title="新建一篇博文（post）"></a>新建一篇博文（post）</h2><p>这个是最基础的操作，直接通过以下命令就可以实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new test_post</span><br><span class="line">or</span><br><span class="line">hexo new post test_post</span><br></pre></td></tr></table></figure>

<p>此时会在hexo/source/_post目录下生成一个名为test_post.md文件。此时刷新网站，也会多一个名为test_post的文章（命令必须在网站的根目录（我的是hexo/）才会有效，win10用户可以在hexo/目录下，按住shift+鼠标右键，然后选择 <strong>在此处打开PowerShell</strong> 直接进如此目录）。使用<code>hexo new</code> 命令可以直接新建post是因为我们网站的配置文件中的 <code>default_layout: post</code> 选的是post，需要更改时可以直接在网站配置文件中搜索更改。可以更改为post、page、draft。</p>
<p>新建完成后直接刷新本地的网站首页就可以看到了。</p>
<h2 id="新建一篇草稿（draft）"><a href="#新建一篇草稿（draft）" class="headerlink" title="新建一篇草稿（draft）"></a>新建一篇草稿（draft）</h2><p>在我们写作的过程中，有时我们想先发布到网站上看看效果。此时我们就可以使用草稿这个功能(draft)，即草稿。我们可以使用下列命令来新建一个草稿。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft test_draft</span><br></pre></td></tr></table></figure>

<p>此时会在hexo/source/_draft 目录下生成一个名为test_draft的文件。此时在网站主页是看不到这篇文章的，因为它是草稿嘛，想看这个需要使用下面的命令重新启动服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<p>在我们确定文章没问题之后，想将其发布，可以使用以下命令，将其推送至公开的网站首页。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish test_draft</span><br></pre></td></tr></table></figure>

<p>此时再刷新网站首页就可以看到了。</p>
<h2 id="新建一个页面（page）"><a href="#新建一个页面（page）" class="headerlink" title="新建一个页面（page）"></a>新建一个页面（page）</h2><p>新建页面操作会生成一个新的普通的网页，这个网页不会直接显示在网站主页上，方法如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>运行命令后会在hexo/source 目录下生成一个名为test 的文件夹，在这个文件夹中会包含一个名为index.md的文件。生的页面可以在本地浏览器中输入：<a href="http://localhost:4000/test/">http://localhost:4000/test/</a> 进行访问。我们主页的<code>关于</code> <code>标签</code> <code>分类</code> 等的跳转页面都是通过这种方式建立的，至于其它用处目前我还不清楚，之后如果发现了它的用法后再来补充。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>我们可以使用 <code>hexo new post or draft or page</code> 的主要原因其实是hexo为我们建立一些常用的模板，这些模板放在hexo/scaffolds目录下。如下图所示。</p>
<p><img src="https://i.imgur.com/2cn9II6.png" alt="模板文件目录"></p>
<p>打开我们最常用的post.md文件，如下图所示，其中第前两行表示名称(title)和日期(date)可以按照这种方式设置为自动填写，第三行的标签(tags)可以手动填写。</p>
<p><img src="https://i.imgur.com/gmevrXa.png" alt="post.md文件"></p>
<p>有时候我们还想添加一些其它的信息，例如分类(categories)，置顶信息（top,这个需要安装特定的插件来实现）等。此时我们可以直接在这个文件中添加，这样以后生成新的博文的时候就会默认包含这些你添加的信息了。</p>
<p>除此之外我们还可以添加一些其他的默认模板，比如我最近在学习python我可以添加一个默认模板用于写python相关的博文，这样我就可以直接通过<code>hexo new python test_python</code> 来生成了（python为我的模板名称）。下图为我建的用于生成python文章的模板。</p>
<p><img src="https://i.imgur.com/cX6dP28.png" alt="python模板"><br>其中tags以列表的方式可以添加多个，而categories列表中是表示文章的类别，比如：<code>[python,learn python]</code> 就表示这篇文章是在python 类别下的 learn python 类别中。</p>
<h2 id="删除博文"><a href="#删除博文" class="headerlink" title="删除博文"></a>删除博文</h2><p>删除文章比较简单，先停止本地运行的服务，然后直接在hexo/source/_posts目录下找到相应文件直接删除，再运行<code>hexo g</code> 命令重新生成，最后再启动本地服务，发现博文已经删除。如果全部删除了，打开首页会有问题，重新创建一个，再打开首页就没问题了。</p>
<p>本文主要介绍了使用hexo进行博文写作和管理文章的方法。其中管理文章主要体现在对tags和categories的应用。目前就想到这么多，以后想到再补充。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博文创建及管理</tag>
      </tags>
  </entry>
</search>
