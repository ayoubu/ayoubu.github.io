<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>财务知识之市盈率(PE)</title>
    <url>/archives/60667.html</url>
    <content><![CDATA[<h2 id="市盈率"><a href="#市盈率" class="headerlink" title="市盈率"></a>市盈率</h2><p>PE这个概念上市公司用的比较多，当然非上市公司也是可以用的。P表示price，指的是股份或者股票的价格。E表示earning，指的是公司的收益。一般来说这个值是一个大于1的整数倍数。也就是说，如果一家公司的收益具有持续性，公司的外在价格应该体现为公司收益的倍数。</p>
]]></content>
      <categories>
        <category>金融</category>
        <category>财务知识</category>
      </categories>
      <tags>
        <tag>PE</tag>
        <tag>财务知识</tag>
        <tag>市盈率</tag>
      </tags>
  </entry>
  <entry>
    <title>python之list</title>
    <url>/archives/17219.html</url>
    <content><![CDATA[<h2 id="List的结构"><a href="#List的结构" class="headerlink" title="List的结构"></a>List的结构</h2><p>Python中的list是以栈这种数据结构存储的，因此包含一些栈的特性。List中可以存放任何数据以及对象。</p>
<h2 id="向List中添加元素"><a href="#向List中添加元素" class="headerlink" title="向List中添加元素"></a>向List中添加元素</h2><h3 id="append-方法"><a href="#append-方法" class="headerlink" title="append() 方法"></a>append() 方法</h3><p>向一个列表中添加一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>]</span><br><span class="line">l.append(<span class="string">&#x27;小宝&#x27;</span>)   <span class="comment">#append 只能接受一个参数</span></span><br><span class="line">&gt;&gt;&gt;l</span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="extend-方法"><a href="#extend-方法" class="headerlink" title="extend() 方法"></a>extend() 方法</h3><p>该方法也是扩展列表的方法，只不过是用另一个列表进行扩展，也可以理解为把一个列表添加到另一个列表的后面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">l.extend([<span class="number">91</span>,<span class="number">99</span>])</span><br><span class="line">&gt;&gt;&gt;l</span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>,<span class="number">91</span>,<span class="number">99</span>]</span><br></pre></td></tr></table></figure>

<h3 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert() 方法"></a>insert() 方法</h3><p>前两个方法是在列表后面添加元素，有时需要在指定位置添加元素，此时就需要用到insert()方法了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">l.insert(<span class="number">1</span>,<span class="number">91</span>) <span class="comment">#在l中的第一个位置插入91</span></span><br><span class="line">&gt;&gt;&gt;l</span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>,<span class="number">91</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="从List中删除元素"><a href="#从List中删除元素" class="headerlink" title="从List中删除元素"></a>从List中删除元素</h2><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">l.remove(<span class="string">&#x27;大宝&#x27;</span>)</span><br><span class="line"><span class="comment">#此时列表为 l = [&#x27;小宝&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="语句-del"><a href="#语句-del" class="headerlink" title="语句 del()"></a>语句 del()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> l[<span class="number">0</span>] <span class="comment">#删除‘大宝’</span></span><br><span class="line"><span class="keyword">del</span> l  <span class="comment">#删除整个列表</span></span><br></pre></td></tr></table></figure>

<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p><code>pop()</code> 可以从列表中取出最后一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">you = l.pop()  <span class="comment">#取出列表中的最后一个元素，即：‘小宝’</span></span><br><span class="line"><span class="comment"># pop()取出特定元素</span></span><br><span class="line">me = pop(<span class="number">0</span>)   <span class="comment">#取出列表中的第一个元素，即：‘大宝’</span></span><br></pre></td></tr></table></figure>

<h2 id="列表的切片操作（slice）"><a href="#列表的切片操作（slice）" class="headerlink" title="列表的切片操作（slice）"></a>列表的切片操作（slice）</h2><p>前面的操作只是用来处理列表中的单个元素，而列表的切片操作是用来处理多个元素的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>]</span><br><span class="line">&gt;&gt;&gt;l[<span class="number">1</span>:<span class="number">3</span>]   <span class="comment">#取出数组中第一个到第三个元素</span></span><br><span class="line">[<span class="number">91</span>,<span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l[:<span class="number">3</span>]  <span class="comment">#取出从开始到第三个元素</span></span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l[<span class="number">1</span>:]  <span class="comment">#取出从第一个到数据末尾的所有元素</span></span><br><span class="line">[<span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>]</span><br><span class="line">&gt;&gt;&gt;l[:]  <span class="comment">#相当于拷贝当前列表</span></span><br><span class="line">[<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>]</span><br></pre></td></tr></table></figure>

<h2 id="列表中的一些常用操作符"><a href="#列表中的一些常用操作符" class="headerlink" title="列表中的一些常用操作符"></a>列表中的一些常用操作符</h2><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><p>两个列表进行比较会从第一个元素开始比，相等时才会跳到下一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">list2 = [<span class="number">234</span>,<span class="number">123</span>]</span><br><span class="line">list3 = [<span class="number">123</span>,<span class="number">123</span>]</span><br><span class="line">&gt;&gt;&gt;list1 &gt; list2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;list1 &gt; list3</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="连接操作符"><a href="#连接操作符" class="headerlink" title="连接操作符"></a>连接操作符</h3><p>列表可以相加，从而实现两个列表的连接。但是加法操作不能实现向列表中添加新元素的操作。为了规范期间最好不要使用列表的加法操作来拼接两个列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">list2 = [<span class="number">234</span>,<span class="number">123</span>]</span><br><span class="line">&gt;&gt;&gt;list1 + <span class="number">789</span></span><br><span class="line">error</span><br><span class="line">&gt;&gt;&gt;list1 + list2</span><br><span class="line">[<span class="number">123</span>,<span class="number">456</span>,<span class="number">234</span>,<span class="number">123</span>]</span><br></pre></td></tr></table></figure>

<h3 id="重复操作符"><a href="#重复操作符" class="headerlink" title="重复操作符"></a>重复操作符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">&gt;&gt;&gt;list1 * <span class="number">3</span>  <span class="comment">#列表乘一个数，相当于将一个列表复制几次</span></span><br><span class="line">[<span class="number">123</span>,<span class="number">456</span>,<span class="number">123</span>,<span class="number">456</span>,<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">&gt;&gt;&gt;list1 *= <span class="number">3</span>  <span class="comment">#复合操作，相当于将一个列表复制3次，然后再放进原列表</span></span><br><span class="line">&gt;&gt;&gt;list1</span><br><span class="line">[<span class="number">123</span>,<span class="number">456</span>,<span class="number">123</span>,<span class="number">456</span>,<span class="number">123</span>,<span class="number">456</span>]</span><br></pre></td></tr></table></figure>

<h3 id="成员关系操作符"><a href="#成员关系操作符" class="headerlink" title="成员关系操作符"></a>成员关系操作符</h3><p>成员关系操作符就是判断成员和列表的关系。这种判断只能在同一个维度的列表中进行，不能判断嵌套列表中的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">123</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;大宝&#x27;</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;小宝&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 嵌套列表的情况</span></span><br><span class="line">list2 = [<span class="number">123</span>,<span class="number">456</span>,[<span class="string">&#x27;小宝&#x27;</span>]]</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;小宝&#x27;</span> <span class="keyword">in</span> list2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 可以用这种方式进行访问</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;小宝&#x27;</span> <span class="keyword">in</span> list2[<span class="number">2</span>]</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="列表的内置函数"><a href="#列表的内置函数" class="headerlink" title="列表的内置函数"></a>列表的内置函数</h2><p>列表的内置函数即列表这个类，官方提供的可用的函数，可以通过<code>dir(list)</code> 这个命令进行查看。</p>
<h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>count() 函数是用来计算列表中某个元素出现的次数的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l.count(<span class="string">&#x27;大宝&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;l.count(<span class="string">&#x27;小宝&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>


<h3 id="index-函数"><a href="#index-函数" class="headerlink" title="index() 函数"></a>index() 函数</h3><p>index() 函数是用来查找元素出现的位置的，会返回元素第一次出现的位置。index()函数还可以对查找范围进行限制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>, <span class="string">&#x27;小宝&#x27;</span>,<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l.index(<span class="string">&#x27;大宝&#x27;</span>)   <span class="comment">#查找列表中&#x27;大宝&#x27;出现的位置</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;l.index(<span class="string">&#x27;小宝&#x27;</span>，<span class="number">3</span>，<span class="number">5</span>)  <span class="comment">#查找从3到5这个区间中&#x27;小宝&#x27;出现的位置</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>reverse() 函数会将列表进行反转，即原来第一个元素会和最后一个元素调换位置，第二个会和倒数第二个元素调换位置，以此类推。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;大宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;小宝&#x27;</span>, <span class="number">99</span>]</span><br><span class="line">&gt;&gt;&gt;l.reverse()</span><br><span class="line">[<span class="number">99</span>,<span class="string">&#x27;小宝&#x27;</span>, <span class="number">91</span>, <span class="string">&#x27;大宝&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort() 函数是用于对列表进行排序的函数。sort()函数可以对纯数字或者对纯字符的列表进行排序，不能对混合的列表进行排序。sort() 函数有三个参数，第一个是要使用的排序算法func，第二个是与该算法对应的key，第三个是reverse，即是否反转（逆序）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;af&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;bc&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;af&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>]</span><br><span class="line">l=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">l=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort(reverse=<span class="literal">True</span>)   <span class="comment">#默认reverse=False</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="列表的拷贝"><a href="#列表的拷贝" class="headerlink" title="列表的拷贝"></a>列表的拷贝</h2><p>列表的拷贝分为<strong>深拷贝</strong>和<strong>浅拷贝</strong>，其中深拷贝是会在内存中重新复制一个原数组，而浅拷贝只是给原数组起了个别名而已。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line">l1 = l    <span class="comment">#浅拷贝</span></span><br><span class="line">l2 = l[:]    <span class="comment">#深拷贝</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>python 语法学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>写作以及博文管理</title>
    <url>/archives/6783.html</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我的博客网站已经搭好，在此特别感谢一下<a href="https://tding.top/archives/2bd6d82.html">小丁</a>的分享。我下的是NexT最新的主题，再搭建的过程踩了不少坑，不过大部分问题通过参考他的解决方案都完美解决了，一些小的地方，只要理解了他的解决方式，也都可以用相似的方法解决，具体的我就不在赘述了。</p>
<p>在搭建好博客之后我就想开始我的博客之路了，可是关于怎么去写博客，网上虽然都介绍，但是我感觉都有点简单，对于要经常写博客的同学来说，可能有点不太友好。通过YouTube上的一位UP主<a href="https://www.youtube.com/playlist?list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm">Mike Dan</a>的分享，我整理出了一些方法，现在记录分享给大家。</p>
<a id="more"></a>

<h2 id="新建一篇博文（post）"><a href="#新建一篇博文（post）" class="headerlink" title="新建一篇博文（post）"></a>新建一篇博文（post）</h2><p>这个是最基础的操作，直接通过以下命令就可以实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new test_post</span><br><span class="line">or</span><br><span class="line">hexo new post test_post</span><br></pre></td></tr></table></figure>

<p>此时会在hexo/source/_post目录下生成一个名为test_post.md文件。此时刷新网站，也会多一个名为test_post的文章（命令必须在网站的根目录（我的是hexo/）才会有效，win10用户可以在hexo/目录下，按住shift+鼠标右键，然后选择 <strong>在此处打开PowerShell</strong> 直接进如此目录）。使用<code>hexo new</code> 命令可以直接新建post是因为我们网站的配置文件中的 <code>default_layout: post</code> 选的是post，需要更改时可以直接在网站配置文件中搜索更改。可以更改为post、page、draft。</p>
<p>新建完成后直接刷新本地的网站首页就可以看到了。</p>
<h2 id="新建一篇草稿（draft）"><a href="#新建一篇草稿（draft）" class="headerlink" title="新建一篇草稿（draft）"></a>新建一篇草稿（draft）</h2><p>在我们写作的过程中，有时我们想先发布到网站上看看效果。此时我们就可以使用草稿这个功能(draft)，即草稿。我们可以使用下列命令来新建一个草稿。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft test_draft</span><br></pre></td></tr></table></figure>

<p>此时会在hexo/source/_draft 目录下生成一个名为test_draft的文件。此时在网站主页是看不到这篇文章的，因为它是草稿嘛，想看这个需要使用下面的命令重新启动服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<p>在我们确定文章没问题之后，想将其发布，可以使用以下命令，将其推送至公开的网站首页。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish test_draft</span><br></pre></td></tr></table></figure>

<p>此时再刷新网站首页就可以看到了。</p>
<h2 id="新建一个页面（page）"><a href="#新建一个页面（page）" class="headerlink" title="新建一个页面（page）"></a>新建一个页面（page）</h2><p>新建页面操作会生成一个新的普通的网页，这个网页不会直接显示在网站主页上，方法如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>运行命令后会在hexo/source 目录下生成一个名为test 的文件夹，在这个文件夹中会包含一个名为index.md的文件。生的页面可以在本地浏览器中输入：<a href="http://localhost:4000/test/">http://localhost:4000/test/</a> 进行访问。我们主页的<code>关于</code> <code>标签</code> <code>分类</code> 等的跳转页面都是通过这种方式建立的，至于其它用处目前我还不清楚，之后如果发现了它的用法后再来补充。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>我们可以使用 <code>hexo new post or draft or page</code> 的主要原因其实是hexo为我们建立一些常用的模板，这些模板放在hexo/scaffolds目录下。如下图所示。</p>
<p><img src="https://i.imgur.com/2cn9II6.png" alt="模板文件目录"></p>
<p>打开我们最常用的post.md文件，如下图所示，其中第前两行表示名称(title)和日期(date)可以按照这种方式设置为自动填写，第三行的标签(tags)可以手动填写。</p>
<p><img src="https://i.imgur.com/gmevrXa.png" alt="post.md文件"></p>
<p>有时候我们还想添加一些其它的信息，例如分类(categories)，置顶信息（top,这个需要安装特定的插件来实现）等。此时我们可以直接在这个文件中添加，这样以后生成新的博文的时候就会默认包含这些你添加的信息了。</p>
<p>除此之外我们还可以添加一些其他的默认模板，比如我最近在学习python我可以添加一个默认模板用于写python相关的博文，这样我就可以直接通过<code>hexo new python test_python</code> 来生成了（python为我的模板名称）。下图为我建的用于生成python文章的模板。</p>
<p><img src="https://i.imgur.com/cX6dP28.png" alt="python模板"><br>其中tags以列表的方式可以添加多个，而categories列表中是表示文章的类别，比如：<code>[python,learn python]</code> 就表示这篇文章是在python 类别下的 learn python 类别中。</p>
<h2 id="删除博文"><a href="#删除博文" class="headerlink" title="删除博文"></a>删除博文</h2><p>删除文章比较简单，先停止本地运行的服务，然后直接在hexo/source/_posts目录下找到相应文件直接删除，再运行<code>hexo g</code> 命令重新生成，最后再启动本地服务，发现博文已经删除。如果全部删除了，打开首页会有问题，重新创建一个，再打开首页就没问题了。</p>
<p>本文主要介绍了使用hexo进行博文写作和管理文章的方法。其中管理文章主要体现在对tags和categories的应用。目前就想到这么多，以后想到再补充。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博文创建及管理</tag>
      </tags>
  </entry>
</search>
